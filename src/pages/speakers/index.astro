---
import { graphql } from "gql.tada";
import ContentLayout from "../../layouts/ContentLayout.astro";
import { client } from "../../utils/graphql-client";
import { notEmpty } from "../../utils/helpers";

Astro.response.headers.set(
  "Cache-Control",
  "s-maxage=60, stale-while-revalidate",
);

// TODO: Update $yearTag when enough speakers are there
const query = graphql(`
  query GetSpeakersPage($limit: Int = 200, $yearTag: String = "FRONT22") {
    collection: pageCollection(where: { slug: "speakers" }) {
      items {
        title
        body
        slug
      }
    }
    tags: tagCollection(limit: 1, where: { title: $yearTag }) {
      items {
        linkedFrom {
          speakers: speakerCollection(limit: $limit) {
            items {
              name
              role
              company
              description
              bio
              slug
              order
              photo {
                url(transform: { resizeStrategy: FILL })
              }
            }
          }
        }
      }
    }
  }
`);

const data = await client.request(query, {});

const speakers =
  data.tags?.items[0]?.linkedFrom?.speakers?.items.filter(notEmpty) || [];
const currentPage = data.collection?.items[0];

// TODO: double check if this is correct
if (!currentPage || !currentPage.title) {
  return {
    status: 404,
    error: "Page not found",
  };
}

speakers.sort((a, b) => {
  if (!a.name || !b.name) return 0; // Why is this even possible...
  if (a.name! > b.name!) return 1;
  else return -1;
});

const time = new Date().toLocaleTimeString();
---

<ContentLayout title="Speakers">
  <p>Time: {time}</p>
  <ul>
    {
      speakers.map((speaker) => (
        <li>
          <a href={`/speakers/${speaker.slug}`}>{speaker.name}</a>
        </li>
      ))
    }
  </ul>
</ContentLayout>
