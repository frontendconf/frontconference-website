---
export async function getStaticPaths() {
	const query = graphql(`
		query {
			collection: speakerCollection {
				items {
					slug
				}
			}
		}
	`);

	const data = await client.request(query);
	const pages = data.collection?.items
		.map((item) => ({ params: { speaker: item?.slug } }))
		.filter((page) => page.params?.speaker);

	return pages;
}

import { graphql } from "gql.tada";
import ContentLayout from "../../layouts/ContentLayout.astro";
import { client } from "../../utils/graphql-client";
import SpeakerDetail, {
	speakerDetailFragment,
} from "../../components/SpeakerDetail.astro";
import TalkDetail, {
	talkDetailFragment,
} from "../../components/TalkDetail.astro";
import { TALK_YEAR_TAG_KEY } from "../../utils/constants";

const { speaker: slug } = Astro.params;

const query = graphql(
	`
		query GetSpeakerDetail($slug: String!) {
			speaker: speakerCollection(limit: 1, where: { slug: $slug }) {
				items {
					...SpeakerDetailFragment
				}
			}
			talk: talkCollection(
				where: {
					OR: [{ speaker: { slug: $slug } }, { speakers: { slug: $slug } }]
				}
				order: date_DESC
			) {
				items {
					...TalkDetailFragment
				}
			}
		}
	`,
	[speakerDetailFragment, talkDetailFragment]
);

const data = await client.request(query, {
	slug: slug as string,
});

const speaker = data.speaker?.items[0];
const talks = data.talk?.items;

// filter talks by current event year
const filteredTalks = talks.filter((talk) => {
	return talk.tagsCollection.items.some(
		(tag) => tag.title === TALK_YEAR_TAG_KEY
	);
});

// TODO: double check if this is correct
if (!speaker || !speaker.name) {
	return {
		status: 404,
		error: "Page not found",
	};
}
---

<ContentLayout
	title={speaker.name}
	metaDescription={filteredTalks[0]?.shortDescription}
	backLinkTitle="Speakers"
	displayBacklink
	contentClass="grid--row-gap-double"
>
	<div class="talk">
		{
			filteredTalks.length > 0 ? (
				<TalkDetail talk={filteredTalks[0]} speaker={speaker} />
			) : (
				<p class="typo-h3">More Details coming soon ...</p>
			)
		}
	</div>
	<aside class="speaker">
		<SpeakerDetail speaker={speaker} />
	</aside>
</ContentLayout>

<style lang="scss">
	@import "../../styles/_imports.scss";

	@include breakpoint-up("lg") {
		.talk {
			grid-column: 1 / span 7;
		}

		.speaker {
			grid-column: 8 / span 5;
			margin-block-start: var(--spacing-20x);
		}
	}

	@include breakpoint-up("xl") {
		.talk {
			grid-column: 2 / span 6;
		}

		.speaker {
			grid-column: 9 / span 4;
		}
	}
</style>
