---
import { graphql } from "gql.tada";
import { client } from "../utils/graphql-client";
import { TALK_YEAR_TAG_KEY } from "../utils/constants";
import TalkCard from "./TalkCard.astro";

const formatDay = (date: string) => {
	return new Date(date).toLocaleDateString("en-US", {
		weekday: "long",
		day: "numeric",
		month: "short",
	});
};

const query = graphql(`
	query GetTalks($limit: Int!, $yearTag: String!) {
		collection: talkCollection(
			limit: $limit
			where: { tags: { title: $yearTag } }
		) {
			items {
				title
				date
				fromTime
				toTime
				room
				speaker: speakersCollection(limit: 1) {
					items {
						slug
						name
						photo {
							url(transform: { width: 600, height: 600, resizeStrategy: FILL })
						}
					}
				}
			}
		}
	}
`);

const data = await client.request(query, {
	yearTag: TALK_YEAR_TAG_KEY,
	limit: 200,
});

const schedule = data.collection?.items || [];

const scheduleMap = schedule.reduce((acc, talk) => {
	const day = formatDay(talk.date);
	const sortDate = new Date(talk.date).getTime();
	const hasSpeaker = talk.speaker.items.length > 0;

	if (!acc[day]) {
		acc[day] = {
			title: day,
			sort: sortDate,
			slots: {},
		};
	}

	if (talk.fromTime) {
		const fromTimeSort = parseInt(talk.fromTime.replace(/[^0-9]/g, ""), 10);

		if (!acc[day].slots[talk.fromTime]) {
			acc[day].slots[talk.fromTime] = {
				sort: fromTimeSort,
				title: talk.fromTime,
				room: !hasSpeaker && talk.room,
				talks: [],
			};
		}

		acc[day].slots[talk.fromTime].talks.push({
			title: talk.title,
			room: talk.room,
			...(hasSpeaker && { speaker: talk.speaker.items[0] }),
		});
	}

	return acc;
}, {});

const sortedSchedule = Object.keys(scheduleMap)
	.map((day) => {
		const dayData = scheduleMap[day];
		dayData.slots = Object.values(dayData.slots)
			.sort((a, b) => a.sort - b.sort)
			.map((slot) => {
				slot.talks.sort((a, b) => a.room.localeCompare(b.room));
				return slot;
			});
		return dayData;
	})
	.sort((a, b) => a.sort - b.sort);
---

<p class="typo-lead">
	Our Schedule is still work in progress - but here's a Sneakpeak.
</p>
<div>
	<ul class="legend" role="presentation">
		<li class="legend-item var--purple">Lower floor</li>
		<li class="legend-item var--green">Upper floor</li>
	</ul>
	{
		sortedSchedule.map((day) => (
			<div class="wrapper">
				<h2 class="typo-h2">{day.title}</h2>
				<div class="schedule">
					{day.slots.map((slot) => (
						<div>
							<h3 class="meta">
								<span>{slot.title}</span>
								<span>{slot.room}</span>
							</h3>
							<ul class="list">
								{slot.talks.map((talk) =>
									talk.speaker ? (
										<TalkCard
											name={talk.speaker.name}
											title={talk.title}
											image={{
												src: talk.speaker.photo.url,
												alt: talk.speaker.name,
											}}
											href={`/speakers/${talk.speaker.slug}`}
											variant={talk.room === "Folium" ? "purple" : "green"}
										/>
									) : (
										<h3 class="typo-h4">{talk.title}</h3>
									),
								)}
							</ul>
						</div>
					))}
				</div>
			</div>
		))
	}
</div>

<style lang="scss">
	@import "../styles/_imports.scss";

	.wrapper + .wrapper {
		margin-block-start: var(--spacing-24x);
	}

	.legend {
		--_mark-color: transparent;

		display: flex;
		gap: var(--spacing-4x);
		list-style: none;
		padding-inline-start: 0;
		place-content: end;

		.legend-item {
			display: flex;
			align-items: center;
			gap: var(--spacing-3x);

			&:before {
				content: "";
				display: block;
				width: pxToRem(24);
				height: pxToRem(24);
				background: linear-gradient(
					225deg,
					var(--_mark-color) 50%,
					transparent 50%
				);
			}

			&.var--purple:before {
				--_mark-color: var(--color-purple-100);
			}

			&.var--green:before {
				--_mark-color: var(--color-green-100);
			}
		}
	}

	.schedule {
		display: flex;
		flex-direction: column;
		gap: var(--spacing-12x);
	}

	.meta {
		@extend %typo-body;

		position: relative;
		display: flex;
		flex-direction: row;
		align-items: center;
		gap: var(--spacing-2x);
		margin-block-start: var(--spacing-6x);
		overflow: hidden;

		@include breakpoint-up("sm") {
			gap: var(--spacing-6x);
		}

		&:after {
			content: "";
			position: absolute;
			height: 1px;
			width: 100%;
			background: var(--color-gray-100);
		}

		> span {
			background: var(--color-white);
			z-index: 1;
			padding-inline: var(--spacing-2x);

			&:first-child {
				padding-inline-start: 0;
			}
		}
	}

	.list {
		list-style: none;
		padding-inline-start: 0;
		margin-block-start: var(--spacing-5x);
		display: grid;
		grid-template-columns: 1fr;
		gap: var(--spacing-8x);

		@include breakpoint-up("md") {
			grid-template-columns: 1fr 1fr;
		}
	}
</style>
