---
import { Icon } from "astro-icon/components";

export interface Props extends HTMLLinkElement {
  icon?: boolean | string;
  iconOnly?: boolean;
  interactive?: boolean;
  inverted?: boolean;
}

const {
  icon,
  iconOnly,
  interactive,
  inverted,
  class: className,
  ...rest
} = Astro.props;
---

<a
  class:list={[
    "link",
    className,
    interactive && "var-interactive",
    inverted && "var-inverted",
  ]}
  {...rest}
>
  {
    iconOnly || interactive ? (
      <span class="sr-only">
        <slot />
      </span>
    ) : (
      <slot />
    )
  }
  {
    icon && (
      <Icon
        name={typeof icon === "string" ? icon : "arrowRight"}
        aria-hidden="true"
      />
    )
  }
</a>

<style lang="scss">
  @import "../styles/_imports.scss";

  .link {
    &:not(.var-interactive) {
      @extend %link;
    }
  }

  svg {
    font-size: inherit;
  }

  .var-interactive {
    display: inline-flex;
    position: relative;
    color: var(--color-gray-900);
    font-size: pxToRem(24);
    z-index: 1;
    transition: color var(--transition-duration-medium)
      var(--transition-easing-default);

    &:before,
    &:after {
      content: "";
      position: absolute;
      aspect-ratio: 1;
      z-index: -1;
      clip-path: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);
      opacity: 0;
      transition: opacity var(--transition-duration-medium)
        var(--transition-easing-default);
    }

    &:before {
      inset: pxToRem(-8);
    }

    &:after {
      inset: pxToRem(-6);
    }

    &:hover {
      color: var(--color-green-300);

      &:before {
        opacity: 1;
        background: var(--color-gray-50);
      }
    }

    &:focus-visible {
      &:before,
      &:after {
        opacity: 1;
      }

      &:before {
        background: var(--color-green-100);
      }

      &:after {
        background: var(--color-white);
      }
    }
  }

  .var-inverted {
    color: var(--color-white);

    &:hover {
      &:before {
        background: var(--color-gray-800);
      }
    }

    &:focus-visible {
      &:after {
        background: var(--color-black);
      }
    }
  }
</style>
