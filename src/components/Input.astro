---
export interface Props extends HTMLInputElement {
	variant?: "primary" | "secondary";
}

const { class: className, variant, ...rest } = Astro.props;
---

<div class:list={["wrapper", variant, className]}>
	<input class="input" {...rest} />
</div>

<style lang="scss">
	@import "../styles/_imports.scss";

	:root {
		--input-color: var(--color-gray-600);
		--input-background-color: var(--color-white);
		--input-outline-background-color: var(--color-white);
		--input-placeholder-color: var(--color-cardboard);

		--input-hover-color: var(--color-gray-600);
		--input-hover-background-color: var(--color-gray-50);

		--input-focus-color: var(--color-gray-700);
		--input-focus-outline-color: var(--color-green-100);

		--input-invalid-color: var(--color-purple-200);
		--input-invalid-outline-color: var(--color-purple-200);
	}

	/**
	* variants need to be declared before styles
	* otherwise the outline styles will not work
	* TODO: investigate why - probably a cascade issue
	*/
	.secondary {
		--input-background-color: var(--color-gray-50);
		--input-outline-background-color: var(--color-gray-50);
		--input-hover-background-color: var(--color-gray-100);
		--input-focus-background-color: var(--color-gray-50);
	}

	.wrapper {
		display: inline-flex;
		justify-content: center;
		align-items: center;
		text-decoration: none;
		position: relative;
		height: pxToRem(40);
		clip-path: polygon(
			12px 0%,
			calc(100% - 12px) 0%,
			100% 50%,
			calc(100% - 12px) 100%,
			12px 100%,
			0% 50%
		);
		padding-inline: var(--spacing-5x);
		column-gap: var(--spacing-1x);
		background-color: var(--input-outline-background-color);

		transition: var(--transition-duration-quick)
			var(--transition-easing-default);
		transition-property: color, background-color;

		&::before {
			content: "";
			display: block;
			position: absolute;
			inset: pxToRem(2) pxToRem(3);
			background-color: var(--input-background-color);
			transition: background-color var(--transition-duration-quick)
				var(--transition-easing-default);
			clip-path: polygon(
				11px 0%,
				calc(100% - 11px) 0%,
				100% 50%,
				calc(100% - 11px) 100%,
				11px 100%,
				0% 50%
			);
			z-index: 1;
		}

		&:where(:has(input:not(:disabled):hover)) {
			--input-color: var(--input-hover-color);
			--input-background-color: var(--input-hover-background-color);
			--input-outline-background-color: var(--input-hover-background-color);
		}

		&:where(:has(input:focus-visible)) {
			--input-color: var(--input-focus-color);
			--input-outline-background-color: var(--input-focus-outline-color);
		}

		&:where(:has(input:disabled)) {
			/* rgba only accepts rgb values */
			--input-placeholder-color: rgba(170, 153, 136, 0.4); /* cardboard */
			--input-color: rgba(77, 78, 78, 0.4); /* gray-600 */
		}

		&:where(:has(input:user-invalid)) {
			--input-color: var(--input-invalid-color);
			--input-outline-background-color: var(--input-invalid-outline-color);
		}
	}

	.input {
		border: 0 none;
		appearance: none;
		outline: none !important;
		padding-inline: 0;
		background-color: transparent;
		color: var(--input-color);
		font-variant-numeric: lining-nums tabular-nums;
		font-size: 16px;
		font-style: normal;
		font-weight: 400;
		line-height: 1.25;
		letter-spacing: 0.16px;
		z-index: 2;

		&::placeholder {
			color: var(--input-placeholder-color);
		}
	}
</style>
